BINARY SEARCH

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n,f=0;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int key,mid;
    int first=0;
    int last=n-1;
    cin>>key;
    while(first<=last)
    {
        mid=(first+last)/2;
        if(arr[mid]<key)
        {
            first=mid+1;
        }
        else if(arr[mid]==key)
        {
            f=1;
            cout<<mid;
            break;
        }
        else
        {
            last=mid-1;
        }
    }
    if(f==0)
    {
        cout<<"NO OCCURRENCES";
    }
}

_________________________________________________________________________________

LINEAR SEARCH

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n,f=0;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    int s;
    cin>>s;
    for(int i=0;i<n;i++)
    {
        if(arr[i]==s)
        {
            f++;
            cout<<"Yes";
            break;
        }
    }
    if(f==0)
    {
        cout<<"No";
    }
}

___________________________________________________________________________________

BUBBLE SORT

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
    {
        cin>>arr[i];
    }
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(arr[j]>arr[j+1])
            {
                int temp=arr[j];
                arr[j]=arr[j+1];
                arr[j+1]=temp;
            }
        }
    }
    for(int i=0;i<n;i++)
    {
        cout<<arr[i]<<" ";
    }
}

_____________________________________________________________________________________

INSERTION SORT

// You are using GCC
#include<iostream>
using namespace std;
int main()
{
    int n;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    for(int i=1;i<n;i++)
    {
        int key=arr[i];
        int j=i-1;
        while(j>=0 && arr[j]>key)
        {
            arr[j+1]=arr[j];
            j--;
        }
        arr[j+1]=key;
    }
    for(int i=0;i<n;i++)
        cout<<arr[i]<<" ";
}

______________________________________________________________________________________

SELECTION SORT

// You are using GCC
#include<iostream>
using namespace std;
struct age
{
    int date;
    int month;
    int year;
}temp;
int main()
{
    int n;
    cin>>n;
    struct age a[n];
    for(int i=0;i<n;i++)
    {
        cin>>a[i].date>>a[i].month>>a[i].year;
    }
    for(int i=0;i<n;i++)
    {
        int min=i;
        for(int j=i+1;j<n;j++)
        {
            if(a[j].year < a[min].year)
            {
                min=j;
            }
        }
        temp=a[min];
        a[min]=a[i];
        a[i]=temp;
    }
    for(int i=0;i<n;i++)
    {
        cout<<a[i].date<<" "<<a[i].month<<" "<<a[i].year<<endl;
    }
}

_________________________________________________________________________________________

HEAP SORT

// You are using GCC
// You are using GCC
#include<iostream>
using namespace std;
void heapify(int x[],int n,int i){
    int lar=i;
    int l=2*i+1;
    int r=2*i+2;
    if(l<n && x[l]>x[lar]){
        lar=l;
    }
    if(r<n && x[r]>x[lar]){
        lar=r;
    }
    if(lar!=i){
        swap(x[i],x[lar]);
        heapify(x,n,lar);
    }
}
void heapsort(int x[],int n){
    for(int i=n/2-1;i>=0;i--){
        heapify(x,n,i);
    }
    for(int i=n-1;i>0;i--){
        swap(x[0],x[i]);
        heapify(x,i,0);
    }
}
int main(){
    int n;
    cin>>n;
    int x[n];
    for(int i=0;i<n;i++){
        cin>>x[i];
    }
    heapsort(x,n);
    for(int i=0;i<n;i++){
        cout<<x[i]<<" ";
    }
}

______________________________________________________________________________

QUICK SORT

#include <iostream>
using namespace std;
int partition(int arr[], int start, int end)
{
	int pivot=arr[start];
	int count=0;
	for(int i=start+1;i<=end;i++) 
	{
		if (arr[i]<=pivot)
			count++;
	}
	int pivotIndex=start+count;
	swap(arr[pivotIndex],arr[start]);
	int i=start;
	int j=end;
	while (i<pivotIndex && j>pivotIndex) 
	{
		while(arr[i]<=pivot) 
		{
			i++;
		}
		while(arr[j]>pivot) 
		{
			j--;
		}
		if(i<pivotIndex && j>pivotIndex) 
		{
			swap(arr[i++],arr[j--]);
		}
	}
	return pivotIndex;
}
void quickSort(int arr[],int start,int end)
{
	if (start>=end)
		return;
	int p=partition(arr,start,end);
	quickSort(arr,start,p-1);
	quickSort(arr,p+1,end);
}
int main()
{
	int n;
	cin>>n;
	int arr[n];
	for(int i=0;i<n;i++)
	{
	    cin>>arr[i];
	}
	quickSort(arr,0,n-1);
	for(int i=0;i<n;i++) 
	{
		cout<<arr[i]<<" ";
	}
	return 0;
}

__________________________________________________________________________________________

MERGE SORT

#include<iostream>
using namespace std;
void swapping(int &a, int &b) {     //swap the content of a and b
   int temp;
   temp = a;
   a = b;
   b = temp;
}
void display(int *array, int size) {
   for(int i = 0; i<size; i++)
      cout << array[i] << " ";
   cout << endl;
}
void merge(int *array, int l, int m, int r) {
   int i, j, k, nl, nr;
   //size of left and right sub-arrays
   nl = m-l+1; nr = r-m;
   int larr[nl], rarr[nr];
   //fill left and right sub-arrays
   for(i = 0; i<nl; i++)
      larr[i] = array[l+i];
   for(j = 0; j<nr; j++)
      rarr[j] = array[m+1+j];
   i = 0; j = 0; k = l;
   //marge temp arrays to real array
   while(i < nl && j<nr) {
      if(larr[i] <= rarr[j]) {
         array[k] = larr[i];
         i++;
      }else{
         array[k] = rarr[j];
         j++;
      }
      k++;
   }
   while(i<nl) {       //extra element in left array
      array[k] = larr[i];
      i++; k++;
   }
   while(j<nr) {     //extra element in right array
      array[k] = rarr[j];
      j++; k++;
   }
}
void mergeSort(int *array, int l, int r) {
   int m;
   if(l < r) {
      int m = l+(r-l)/2;
      // Sort first and second arrays
      mergeSort(array, l, m);
      mergeSort(array, m+1, r);
      merge(array, l, m, r);
   }
}
int main() {
   int n;
   cin >> n;
   int arr[n];     //create an array with given number of elements
   for(int i = 0; i<n; i++) {
      cin >> arr[i];
   }
   mergeSort(arr, 0, n-1);     //(n-1) for last index
   display(arr, n);
}

____________________________________________________________________________________________

ACTIVITY SELECTION PROBLEM

#include<iostream>
using namespace std;
struct match
{
    char name[50];
    int start;
    int end;
};
int main()
{
    int n;
    cin>>n;
   struct match m[n];
    struct match temp;
    for(int i=0;i<n;i++)
    {
        cin>>m[i].name;
        cin>>m[i].start;
        cin>>m[i].end;
    }
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(m[j].end>m[j+1].end)
            {
                temp=m[j];
                m[j]=m[j+1];
                m[j+1]=temp;
            }
        }
    }
    cout<<"Selected Activities are:"<<endl;
    cout<<m[0].name<<" ";
    int x=0;
    
    for(int i=1;i<n;i++)
    {
        if(m[i].start>=m[x].end)
        {
            cout<<m[i].name<<" ";
            x=i;
        }
    }
}

____________________________________________________________________________________

KNAPSACK PROBLEM

#include<iostream>
#include<iomanip>
using namespace std;
struct profit
{
    float wei;
    float val;
    float rat;
};
int main()
{
    int n;
    cin>>n;
    struct profit m[n];
    struct profit temp;
    for(int i=0;i<n;i++)
    {
        cin>>m[i].wei;
        cin>>m[i].val;
        m[i].rat=m[i].val/m[i].wei;
    }
    float cap;
    cin>>cap;
    for(int i=0;i<n-1;i++)
    {
        for(int j=0;j<n-i-1;j++)
        {
            if(m[j].rat<m[j+1].rat)
            {
                temp=m[j];
                m[j]=m[j+1];
                m[j+1]=temp;
            }
        }
    }
    float profit=0;
    for(int i=0;i<n;i++)
    {
        if(m[i].wei<cap)
        {
            profit=profit+m[i].val;
            cap=cap-m[i].wei;
        }
        else
        {
            profit=profit+((cap/m[i].wei)*m[i].val);
            break;
        }
    }
    cout<<"Maximum profit is:- ";
    cout<<fixed<<setprecision(2)<<profit;
}

___________________________________________________________________________________

NAIVE ALGORITHM

// You are using GCC
#include<iostream>
using namespace std;
void find(string a, string b)
{
    int m=a.length();
    int n=b.length();
    int f=0,j;
    for(int i=0;i<m;i++)
    {
        for(j=0;j<n;j++)
        {
            if(a[i+j]!=b[j])
            {
                break;
            }
        }
        if(j==n)
        {
            f=1;
            cout<<"Found at "<<i;
            cout<<endl;
        }
    }
    if(f==0)
    {
        cout<<"Not Found";
    }
}
int main()
{
    string a,b;
    cin>>a>>b;
    find(a,b);
}

_____________________________________________________________________________________

KMP ALGORITHM

#include <iostream>
#include<cstring>
using namespace std;
 
// Function to implement the KMP algorithm
void KMP(char text[], char pattern[])
{
    int m = strlen(text);
    int n = strlen(pattern);
    int f=0;
 
     // next[i] stores the index of the next best partial match
    int next[n + 1];
 
    for (int i = 0; i < n + 1; i++) {
        next[i] = 0;
    }
 
    for (int i = 1; i < n; i++)
    {
        int j = next[i];
 
        while (j > 0 && pattern[j] != pattern[i]) {
            j = next[j];
        }
 
        if (j > 0 || pattern[j] == pattern[i]) {
            next[i + 1] = j + 1;
        }
    }
 
    for (int i = 0, j = 0; i < m; i++)
    {
        if (text[i] == pattern[j])
        {
            if (++j == n) {
                cout << "Found at " << i - j + 1 << endl;
                f=1;
            }
        }
        else if (j > 0)
        {
            j = next[j];
            i--;    // since `i` will be incremented in the next iteration
        }
    }
    if(f==0)
    cout<<"Not Found";
}
 
// Program to implement the KMP algorithm in C++
int main()
{
    char text[100] ;
    char pattern[100] ;
    cin>>text;
    cin>>pattern;
    KMP(text, pattern);
 
    return 0;
}

____________________________________________________________________________________________

SUBSET SUM PROBLEM

#include<iostream>
using namespace std;
static int subset_count=0;
void subsetSum(int list[], int sum, int starting_index, int target_sum, int n)
{
    if(target_sum==sum)
    {
        subset_count++;
        if(starting_index<n)
        {
            subsetSum(list, sum-list[starting_index-1], starting_index, target_sum, n);
        }
    }
    else
    {
        for(int i=starting_index; i<n; i++)
        {
            subsetSum(list, sum+list[i], i+1, target_sum, n);
        }
    }
}
int main()
{
    int n;
    cin>>n;
    int list[n];
    for(int i=0;i<n;i++)
    {
        cin>>list[i];
    }
    int s;
    cin>>s;
    subsetSum(list, 0, 0, s, n);
    cout<<subset_count;
}

__________________________________________________________________________________________________

RAT IN A MAZE

#include<iostream>
using namespace std;

bool issafe(int** arr, int x, int y, int n){
    if(x<n && y<n && arr[x][y]==1){
        return true;
    }
    return false;
}
bool ratinMaze(int** arr, int x, int y, int n, int** solArr){
    if(x==n-1 && y==n-1){
        solArr[x][y]=1;
        return true;
    }
    if(issafe(arr, x, y, n)){
        solArr[x][y]=1;
        if(ratinMaze(arr, x+1, y, n, solArr)){
            return true;
        }
        if(ratinMaze(arr, x, y+1, n, solArr)){
            return true;
        }
        solArr[x][y]=0;
        return false;
    }
    return false;
}
int main(){
    int n;
    cin>>n;
    int** arr=new int*[n];
    for(int i=0; i<n; i++){
        arr[i]=new int[n];
    }
    for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            cin>>arr[i][j];
        }
    }
    int** solArr=new int*[n];
    for(int i=0; i<n; i++){
        solArr[i] = new int[n];
        for(int j=0; j<n; j++){
            solArr[i][j]=0;
        }
    }
    if(ratinMaze(arr, 0, 0, n, solArr)){
        for(int i=0; i<n; i++){
        for(int j=0; j<n; j++){
            cout<<solArr[i][j]<<" ";
        }cout<<endl;

        }
    }
    else{
        cout<<"Solution doesn't exist";
    }
    return 0;
}

________________________________________________________________________________________

LONGEST COMMON SUBSEQUENCE

#include<bits/stdc++.h>
using namespace std;
int lcs(string w1,string w2)
{
    int n=w1.length();
    int m=w2.length();
    int** dp=new int*[n+1];
    for(int i=0;i<=n;i++)
    {
        dp[i]=new int[m+1];
        for(int j=0;j<=m;j++)
        {
            dp[i][j]=0;
        }
    }
    w1=" "+w1;
    w2=" "+w2;
    for(int i=1;i<=n;i++)
    {
        for(int j=1;j<=m;j++)
        {
            if(w1[i]!=w2[j])
            {
                dp[i][j]=max({dp[i-1][j],dp[i][j-1]});
            }
            else
            {
                dp[i][j]=1+dp[i-1][j-1];
            }
        }
    }
    return dp[n][m];
}
int main()
{
    string a,b;
    cin>>a>>b;
     cout<<lcs(a,b)<<"\n";
}

__________________________________________________________________________________________

LEVENSHTEIN DISTANCE

//levenshtien distance
#include<bits/stdc++.h>
using namespace std;
int editlength(string w1,string w2){
    int n=w1.length();
    int m=w2.length();
    int** dp=new int*[n+1];
    for(int i=0;i<=n;i++){
        dp[i]=new int[m+1];
        for(int j=0;j<=m;j++){
            dp[i][j]=0;//filling dp[0][0]=0
            if(i==0){
                dp[i][j]=j;//filling 1 to letter end
            }
            else if(j==0){
                dp[i][j]=i;
            }
        }
    }
    w1=" "+w1;//to increase size
    w2=" "+w2;
    
    for(int i=1;i<=n;i++){
        for(int j=1;j<=m;j++){
            if(w1[i]!=w2[j]){
                dp[i][j]=1+min({dp[i-1][j-1],dp[i-1][j],dp[i][j-1]});
            }
            else{
                dp[i][j]=dp[i-1][j-1];
            }
        }
    }
    return dp[n][m];
}

int main(){
    string a,b;
    cin>>a>>b;
     cout<<editlength(a,b)<<"\n";
}

______________________________________________________________________________________________

SEGMENT TREE RMQ

#include <bits/stdc++.h>
using namespace std;

void buildSegmentTree(int arr[], int tree[], int start, int end, int treeNode) {
    if (start == end) {
        tree[treeNode] = arr[start];
        return;
    }

    int mid = (start + end) / 2;
    
    buildSegmentTree(arr, tree, start, mid, 2 * treeNode+1);
    buildSegmentTree(arr, tree, mid + 1, end, 2 * treeNode + 2);

    tree[treeNode] = min(tree[2 * treeNode+1], tree[2 * treeNode + 2]);
}

int query(int tree[], int start, int end, int treeNode, int left, int right) {
    if (left > end || right < start) {
        return INT_MAX;
    }
    if (left <= start && right >= end) {
        return tree[treeNode]; 
    }

    int mid = (start + end) / 2;
    
    int leftmin = query(tree, start, mid, 2 * treeNode+1, left, right);
    int rightmin= query(tree, mid + 1, end, 2 * treeNode + 2, left, right);

    return min(leftmin,rightmin);
}


int main() {
    int n; 
    cin >> n;
    int arr[n]; 
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    int left, right; 
    cin >> left >> right;
    int height = ceil(log2(n));
    int treeSize = 2 * pow(2, height) - 1;

    int tree[treeSize]; 

    buildSegmentTree(arr, tree, 0, n - 1, 0);   

    cout << "Minimum of values in range [" << left << ", " << right << "] is = " <<  query(tree, 0, n - 1, 0, left, right)<< endl;
    return 0;
}

__________________________________________________________________________________________________________________

RMQ USING SPARSE TABLE

#include <iostream>
#include <cmath>
using namespace std;
int cons(int arr[],int a,int b,int *st,int ind){
    if(a == b){
        st[ind] = arr[a];
        return arr[a];
    }
    int mid = (a + b) / 2;
    st[ind] = min(cons(arr,a,mid,st,2*ind + 1),cons(arr,mid+1,b,st,2*ind+2));
    return st[ind];
}
int* create(int arr[],int a,int b){
    int n = b - a + 1;
    int x = ceil(log2(n));
    int size = 2 * pow(2,x) - 1;
    int *st = new int[size];
    cons(arr,a,b,st,0);
    return st;
}
int main(){
    int n,a,b;
    cin>>n;
    int arr[n];
    for(int i=0;i<n;i++)
        cin>>arr[i];
    cin>>a>>b;
    if(a>b or a>=n or b>=n){
        cout<<0;
        exit(0);
    }
    int *st = create(arr,a,b);
    cout<<st[0];
}

_________________________________________________________________________________________________

FLOYD WARSHALL ALGORITHM

#include<bits/stdc++.h>
using namespace std;
int INF= 99999;
int V;
void FW(int **graph)
{
	int dist[V][V],i, j, k;
	for(i = 0; i < V; i++) 
	{		
			for(j = 0; j < V; j++) 
			{
				dist[i][j]=graph[i][j];
			}
	}
	
	for (k = 0; k < V; k++) 
	{
		for (i = 0; i < V; i++) 
		{		
			for (j = 0; j < V; j++) 
			{
				if (dist[i][j] > dist[i][k] + dist[k][j])
					dist[i][j] = dist[i][k] + dist[k][j];
			}
		}
	}
	for (i = 0; i < V; i++) 
	{
			for (j = 0; j < V; j++) 
			{
				if (dist[i][j] ==INF )
					cout << "INF"
						<< " ";
				else
					cout << dist[i][j] << " ";
			}
			cout << endl;
	}
}
int main()
{
	int E,source,destn,value;
	cin>>V>>E;
	int **graph=new int*[V]; 
	for(int i=0; i<V; i++)
	{
        graph[i]=new int[V];
    }
	for(int i = 0 ; i < V ; i++)
	{ 
		for(int j = 0 ; j < V ; j++)
		{ 
			if(i==j) 
			{
				graph[i][j] = 0 ; 
			
			}		
			else 
			{
				graph[i][j] = INF ;	
			}
				
		}
	}
	for(int i=0;i<E;i++)
	{
		cin>>source;
		cin>>destn;
		cin>>value;
		graph[source][destn]=value;
		graph[destn][source]=value;		
	}	
	for(int i = 0 ; i < V ; i++)
	{ 
		for(int j = 0 ; j < V ; j++)
		{ 
			if(graph[i][j]==INF) 
			{
				cout<<"INF  ";	 
			}		
			else 
			{
				cout<<graph[i][j]<<" ";		
			}		
		}
		cout<<endl;
	}
	FW(graph);
	return 0;
}

______________________________________________________________________________________________

PRIMS ALGORITHM

#include<iostream>
using namespace std;
#define INFINITY 9999
int main()
{
	int x,y,u,v,n,i,j,num_edge=1;
	int visited[10]={0},min;
	cin>>n;
	int adj[n][n];
	for(i=0;i<n;i++)
	{
		for(j=0;j<n;j++)
		{
			cin>>adj[i][j];
			if(adj[i][j]==0)
				adj[i][j]=INFINITY;
		}
	}
	visited[0]=1;
	while(num_edge<n)
	{
		for(i=0,min=INFINITY;i<n;i++)
		{
			for(j=0;j<n;j++)
			{
				if(adj[i][j]<min)
				{
					if(visited[i]!=0)
					{
						min=adj[i][j];
						x=u=i;
						y=v=j;
					}
				}
			}
		}
		if(visited[u]==0 || visited[v]==0)
		{
			cout<<x<<"  "<<y<<"  "<<min<<endl;
			visited[y]=1;
		}
		adj[x][y]=adj[y][x]=9999;
		num_edge++;
	}
return 0;
}

____________________________________________________________________________________________________

DIJKSTRAS ALGORITHM

Djkstra's Algorithm
// You are using GCC
#include <bits/stdc++.h>
using namespace std;
#define V 5 // Number of vertices

int minDistance(int dist[], bool sptSet[]) {
    int min = INT_MAX, min_index;

    for (int v = 0; v < V; v++) {
        if (!sptSet[v] && dist[v] <= min) {
            min = dist[v];
            min_index = v;
        }
    }

    return min_index;
}

void printSolution(int dist[]) {
    cout << "Vertex\tDistance from Source\n";
    for (int i = 0; i < V; i++) {
        cout << i << "\t" << dist[i] << std::endl;
    }
}

void dijkstra(int graph[V][V], int src) {
    int dist[V];
    bool sptSet[V];

    for (int i = 0; i < V; i++) {
        dist[i] = INT_MAX;
        sptSet[i] = false;
    }

    dist[src] = 0;

    for (int count = 0; count < V - 1; count++) {
        int u = minDistance(dist, sptSet);
        sptSet[u] = true;

        for (int v = 0; v < V; v++) {
            if (!sptSet[v] && graph[u][v] && dist[u] != INT_MAX &&
                dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }

    printSolution(dist);
}

int main() {
    int graph[V][V];
    for(int i=0;i<V;i++){
        for(int j=0;j<V;j++){
            cin>>graph[i][j];
        }
    }
    int s;
    cin>>s;
    dijkstra(graph, s);

    return 0;
}

______________________________________________________________________________________________________

KRUSKALS ALGORITHM

#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

class Edge {
public:
    int src, dest, weight;

    bool operator<(const Edge &other) const {
        return weight < other.weight;
    }
};

class Subset {
public:
    int parent, rank;
};

class Graph {
    int V, E;
    vector<Edge> edges;

public:
    Graph(int v, int e) {
        V = v;
        E = e;
    }

    void addEdge(int src, int dest, int weight) {
        Edge edge;
        edge.src = src;
        edge.dest = dest;
        edge.weight = weight;
        edges.push_back(edge);
    }

    int find(Subset subsets[], int i) {
        if (subsets[i].parent != i)
            subsets[i].parent = find(subsets, subsets[i].parent);

        return subsets[i].parent;
    }

    void Union(Subset subsets[], int x, int y) {
        int xroot = find(subsets, x);
        int yroot = find(subsets, y);

        if (subsets[xroot].rank < subsets[yroot].rank)
            subsets[xroot].parent = yroot;
        else if (subsets[xroot].rank > subsets[yroot].rank)
            subsets[yroot].parent = xroot;
        else {
            subsets[yroot].parent = xroot;
            subsets[xroot].rank++;
        }
    }

    void KruskalMST() {
        vector<Edge> result;
        int e = 0;
        int i = 0;

        sort(edges.begin(), edges.end());

        Subset subsets[V];

        for (i = 0; i < V; ++i) {
            subsets[i].parent = i;
            subsets[i].rank = 0;
        }

        i = 0;

        while (e < V - 1) {
            Edge next_edge = edges[i++];

            int x = find(subsets, next_edge.src);
            int y = find(subsets, next_edge.dest);

            if (x != y) {
                result.push_back(next_edge);
                Union(subsets, x, y);
                e++;
            }
        }

        cout << "Following are the edges in the constructed MST" << endl;
        int minimumCost = 0;
        for (Edge edge : result) {
            cout << edge.src << " -- " << edge.dest << " == " << edge.weight << endl;
            minimumCost += edge.weight;
        }
        cout << "Minimum Cost Spanning Tree: " << minimumCost << endl;
    }
};

int main() {
    int V, E;
    cin >> V >> E;
    Graph graph(V, E);

    for (int i = 0; i < E; i++) {
        int src, dest, weight;
        cin >> src >> dest >> weight;
        graph.addEdge(src, dest, weight);
    }

    graph.KruskalMST();

    return 0;
}

_______________________________________________________________________________________________________________